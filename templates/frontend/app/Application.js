// Generated by Pablo Sergio Alvarado Gutierrez
/**
 * DeftJS Application class for the app application.
 */

Ext.define("app.Application", {
  extend: "Deft.mvc.Application",
  requires: [
    "app.config.AppConfig",
    "app.view.Viewport",
    "app.view.login.Login",
    "app.service.login.LoginService",
    "app.service.jwt.JwtService",
    "app.service.notification.NotificationService",
    "app.service.localStorage.LocalStorageService",
    /* Overrides */
    "overrides.rownumberer.RowNumberer",
    "overrides.numberfield.NumberField",
    "overrides.ajax.Ajax",
  ],
  /**
  	* init() runs when Ext.onReady() is called.
  */

    init: function() {
        this.beforeInit();
        jwtService = Ext.create('app.service.jwt.JwtService');
        var token = localStorage.getItem("appToken");
        var isTokenExpired = token ? jwtService.isTokenExpired(token) : false;
        Deft.Injector.configure(this.buildInjectorConfiguration());
        Deft.promise.Deferred.enableLogging = false;
        return this.launch();
    },
    /**
     * @protected
     * Returns the configuration object to pass to Deft.Injector.configure(). Override in subclasses to alter the Injector configuration before returning the config object.
     * @return {Object} The Injector configuration object.
     */

  buildInjectorConfiguration: function() {
    var config;
    config = {
      appConfig: {
        className: "app.config.AppConfig",
        parameters: [
          {
            environment: app.config.AppConfig.DEVELOPMENT_ENV
            //environment: app.config.AppConfig.PRODUCTION_ENV
          }
        ]
      },
      /* @start inject */
      /* Login */
      loginService: "app.service.login.LoginService",
      /* Token */
      jwtService: "app.service.jwt.JwtService",
      /* Notificaciones */
      notificationService: "app.service.notification.NotificationService",
      /* Local Storage */
      localStorageService: "app.service.localStorage.LocalStorageService",
       /*AbstractContext*/
      abstractContext: "app.context.abstract.AbstractContext",
      /* Menu */
      menuContext: "app.context.menu.MenuContext",
      menuService: "app.service.menu.MenuService",
      menuStore: "app.store.menu.MenuStore",
      /* @end inject */
    };
    return config;
  },

  /**
  	* @protected
  	* Runs at the start of the init() method. Override in subclasses if needed.
  */
    beforeInit: function() {
        splashscreen = Ext.getBody().mask('Iniciando la aplicacion...', 'splashscreen');
        splashscreen.addCls('splashscreen');
        Ext.DomHelper.insertFirst(Ext.query('.x-mask-msg')[0], {
            cls: 'x-splash-icon'
        })
    },
    /**
     * @protected
     * Runs at the end of the init() method. Useful to create initial Viewport, start Jasmine tests, etc.
     */
    launch: function(){
        jwtService = Ext.create('app.service.jwt.JwtService');
        Ext.setGlyphFontFamily('FontAwesome');
        var task = new Ext.util.DelayedTask(function(){
            splashscreen.fadeOut({
                duration: 1000,
                remove: true
            });

            splashscreen.next().fadeOut({
                duration: 1000,
                remove: true,
                listeners: {
                    afteranimate: function(el, startime, eOpts){
                        var token;

                        // Check to see the current value of the localStorage key
                        token = localStorage.getItem("appToken");
                        var isTokenExpired = token ? jwtService.isTokenExpired(token) : false;
                        Ext.widget(token && !isTokenExpired ? 'app-main' : 'login');
                    }
                }
            });

        });

        task.delay(2000);
    }
});